"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var slp_1 = require("./slp");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var Bitcore = __importStar(require("bitcore-lib-cash"));
var dummyTxid = '11'.repeat(32);
var dummyScriptPubKey = Buffer.from('00', 'hex');
var SlpTradeManager = /** @class */ (function () {
    function SlpTradeManager(BITBOX) {
        this.BITBOX = BITBOX;
        this.slp = new slp_1.Slp(this.BITBOX);
        this.trades = new Map();
    }
    SlpTradeManager.prototype.addNewTrade = function (txid, vout, trade) {
        if (!this.trades.has(txid + vout.toString()))
            this.trades.set(txid + vout, trade);
        else
            throw Error("A trade for this token already exists");
    };
    SlpTradeManager.prototype.updateTrade = function (trade) {
        var txid = trade.originalOffer.token.txid;
        var vout = trade.originalOffer.token.vout.toString();
        this.trades.set(txid + vout, trade);
    };
    SlpTradeManager.prototype.createSlpForBchOffer = function (utxo, priceSatoshis, paymentAddress, label) {
        // Seller creates a partially signed transaction using SINGLE|ANYONECANPAY
        // -----------------------------------------------------------------------
        // inputs                    |  outputs
        // --------------------------|--------------------------------------------
        //  dummy                    |  empty (TO BE REPLACED WITH SLP MSG)
        //  dummy                    |  empty (TO BE REPLACED WITH 546)
        //  Seller Signed SLP input  |  Seller Signed BCH output
        var config = {
            tokenIdHex: utxo.slpTransactionDetails.tokenIdHex,
            outputQtyArray: [new bignumber_js_1.default(0), utxo.slpUtxoJudgementAmount]
        };
        var script = slp_1.Slp.buildSendOpReturn(config);
        var tb = new this.BITBOX.TransactionBuilder(__1.Utils.txnBuilderString(paymentAddress));
        tb.addInput(dummyTxid, 0);
        // tb.addInput(dummyTxid, 1);
        tb.addInput(utxo.txid, utxo.vout);
        // tb.addOutput(dummyScriptPubKey, 0);
        // tb.addOutput(dummyScriptPubKey, 0);
        tb.addOutput(script, 0);
        tb.addOutput(__1.Utils.toCashAddress(paymentAddress), Math.round(priceSatoshis));
        tb.sign(0, this.BITBOX.ECPair.fromWIF(utxo.wif), undefined, tb.hashTypes.SIGHASH_ALL, 546);
        // tb.sign(1, this.BITBOX.ECPair.fromWIF(utxo.wif), undefined, tb.hashTypes.SIGHASH_ALL, 546);
        console.log(tb.hashTypes.SIGHASH_SINGLE);
        console.log(tb.hashTypes.SIGHASH_ANYONECANPAY);
        console.log(tb.hashTypes.SIGHASH_BITCOINCASH_BIP143);
        tb.sign(1, this.BITBOX.ECPair.fromWIF(utxo.wif), undefined, tb.hashTypes.SIGHASH_SINGLE | tb.hashTypes.SIGHASH_ANYONECANPAY | tb.hashTypes.SIGHASH_BITCOINCASH_BIP143, utxo.satoshis);
        var tx = tb.transaction.build();
        var offer = {
            label: label ? label : null,
            isSpent: false,
            op_return: script.toString('hex'),
            dummyHex: tx.toHex(),
            scriptSig: tx.ins[1].script,
            token: {
                lockedSatoshis: utxo.satoshis,
                qty: utxo.slpUtxoJudgementAmount,
                priceSatoshis: priceSatoshis,
                txid: utxo.txid,
                vout: utxo.vout,
                details: utxo.slpTransactionDetails
            },
            paymentAddress: paymentAddress
        };
        var trade = {
            label: "",
            isComplete: false,
            txHex: "",
            originalOffer: offer
        };
        this.addNewTrade(utxo.txid, utxo.vout, trade);
        return offer;
    };
    SlpTradeManager.prototype.createSlpForBchPurchase = function (tokenOffer, buyerPaymentUtxos, buyerAddress) {
        // Buyer completes the parially signed transaction
        // ----------------------------------------------------------- 
        // inputs                                |  outputs
        // --------------------------------------|--------------------
        //  Buyer filler (allow a token burn)    |  SLP OP_RETURN
        //  Buyer filler (allow a token burn)    |  546 satoshi to buyer
        //  Seller SLP input                     |  Seller BCH output
        //  Buyer UTXO                           |  Buyer BCH change output
        //  ... buyer input UTXOs                |  
        if (tokenOffer.isSpent)
            throw Error("This token offer has already been spent.");
        var signedTokenInput = {
            txid: tokenOffer.token.txid,
            vout: tokenOffer.token.vout,
            satoshis: new bignumber_js_1.default(tokenOffer.token.lockedSatoshis),
            scriptSig: tokenOffer.scriptSig,
            slpTransactionDetails: tokenOffer.token.details,
            slpUtxoJudgement: __1.SlpUtxoJudgement.SLP_TOKEN,
            slpUtxoJudgementAmount: tokenOffer.token.qty
        };
        var inputs;
        if (buyerPaymentUtxos.length > 2)
            inputs = __spread(__1.Utils.mapToUtxoArray(buyerPaymentUtxos.slice(0, 2)), [signedTokenInput], __1.Utils.mapToUtxoArray(buyerPaymentUtxos.slice(2)));
        else if (buyerPaymentUtxos.length === 2)
            inputs = __spread(__1.Utils.mapToUtxoArray(buyerPaymentUtxos), [signedTokenInput]);
        else
            throw Error("Must have at least 2 input UTXOs supplied by the buyer.");
        if (buyerPaymentUtxos.map(function (txo) { return txo.satoshis; }).reduce(function (v, i) { return v += i; }, 0) - tokenOffer.token.priceSatoshis < 0)
            throw Error("Insufficient input satoshis.");
        var change = [{ amount: tokenOffer.token.priceSatoshis, address: tokenOffer.paymentAddress }];
        var feeEstimate = this.BITBOX.BitcoinCash.getByteCount({ P2PKH: buyerPaymentUtxos.length + 1 }, { P2PKH: 3 }) + (tokenOffer.op_return.length / 2) + 20;
        if (buyerPaymentUtxos.map(function (txo) { return txo.satoshis; }).reduce(function (v, i) { return v += i; }, 0) - tokenOffer.token.priceSatoshis - feeEstimate > 546) {
            change = change.concat({
                address: buyerAddress,
                amount: buyerPaymentUtxos.map(function (txo) { return txo.satoshis; }).reduce(function (v, i) { return v += i; }, 0) - tokenOffer.token.priceSatoshis - feeEstimate
            });
        }
        var config = {
            slpSendOpReturn: Buffer.from(tokenOffer.op_return, 'hex'),
            input_token_utxos: inputs,
            tokenReceiverAddressArray: [buyerAddress],
            bchChangeReceiverAddress: tokenOffer.paymentAddress,
            explicitBchChange: change
        };
        if (buyerPaymentUtxos.find(function (txo) { return txo.slpUtxoJudgement === __1.SlpUtxoJudgement.SLP_TOKEN; })) {
            var allowBurnFor = buyerPaymentUtxos.map(function (txo) {
                if (txo.slpUtxoJudgement === __1.SlpUtxoJudgement.SLP_TOKEN)
                    return txo.slpTransactionDetails.tokenIdHex;
                else
                    return "";
            }).filter(function (s) { return s !== ""; });
            config.allowTokenBurning = __spread(new Set(allowBurnFor));
        }
        var tx = this.slp.buildRawSendTx(config);
        return tx;
    };
    SlpTradeManager.prototype.parseTokenOfferFromDummy = function (dummyHex) {
        return __awaiter(this, void 0, void 0, function () {
            var txn, slp, slpMsg, txid, vout, txo, offer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txn = new Bitcore.Transaction(dummyHex);
                        slp = new slp_1.Slp(this.BITBOX);
                        try {
                            slpMsg = slp.parseSlpOutputScript(txn.outputs[0]._scriptBuffer);
                        }
                        catch (_) {
                            throw Error("Not a valid SLP transaction.");
                        }
                        txid = txn.inputs[2].prevTxId.toString('hex');
                        vout = txn.inputs[2].outputIndex;
                        return [4 /*yield*/, this.BITBOX.Blockchain.getTxOut(txid, vout, true)];
                    case 1:
                        txo = _a.sent();
                        if (txo)
                            offer = {
                                label: "",
                                isSpent: false,
                                op_return: txn.outputs[0]._scriptBuffer.toString('hex'),
                                dummyHex: dummyHex,
                                scriptSig: txn.inputs[2]._scriptBuffer,
                                token: {
                                    lockedSatoshis: Math.round(txo.value * Math.pow(10, 8)),
                                    qty: slpMsg.sendOutputs[1],
                                    priceSatoshis: txn.outputs[2].satoshis,
                                    txid: txid,
                                    vout: vout,
                                    details: slpMsg
                                },
                                paymentAddress: this.BITBOX.Address.fromOutputScript(txn.outputs[2]._scriptBuffer)
                            };
                        else {
                            offer = {
                                label: "",
                                isSpent: true,
                                op_return: txn.outputs[0]._scriptBuffer.toString('hex'),
                                dummyHex: dummyHex,
                                scriptSig: txn.inputs[2]._scriptBuffer,
                                token: {
                                    lockedSatoshis: 0,
                                    qty: new bignumber_js_1.default(0),
                                    priceSatoshis: txn.outputs[2].satoshis,
                                    txid: txid,
                                    vout: vout,
                                    details: slpMsg
                                },
                                paymentAddress: this.BITBOX.Address.fromOutputScript(txn.outputs[2]._scriptBuffer)
                            };
                        }
                        return [2 /*return*/, offer];
                }
            });
        });
    };
    return SlpTradeManager;
}());
exports.SlpTradeManager = SlpTradeManager;
//# sourceMappingURL=trademanager.js.map